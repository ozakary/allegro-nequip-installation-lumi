Bootstrap: localimage
From: stage3.sif

%post

source /version.conf

LAMMPS_INSTALL_DIR=/opt/lammps

mkdir -p $LAMMPS_INSTALL_DIR

source /.init-module-build.sh

module load CrayEnv
module load PrgEnv-gnu craype-network-none buildtools
module load libfabric
module load pytorch

module rm cray-libsci

export PYTHONPATH="$LAMMPS_INSTALL_DIR/lib/python$PYTHON_VERSION/site-packages:$PYTHONPATH"
export PYTHONPATH="$LAMMPS_INSTALL_DIR/lib64/python$PYTHON_VERSION/site-packages:$PYTHONPATH"

# Install dependencies
CC=cc CXX=CC pip install --no-build-isolation --prefix $LAMMPS_INSTALL_DIR wheel==$WHEEL_VERSION
CC=cc CXX=CC pip install --no-build-isolation --prefix $LAMMPS_INSTALL_DIR matscipy==$MATSCIPY_VERSION
CC=cc CXX=CC pip install --no-build-isolation --prefix $LAMMPS_INSTALL_DIR vesin==$VESIN_VERSION

# Install nequip-allegro from PyPI (this also installs nequip automatically)
CC=cc CXX=CC pip install --no-build-isolation --prefix $LAMMPS_INSTALL_DIR nequip-allegro==$ALLEGRO_VERSION

module load craype-network-ofi

# Download and prepare libtorch
curl -LO https://download.pytorch.org/libtorch/rocm6.0/libtorch-cxx11-abi-shared-with-deps-$LIBTORCH_VERSION.zip
unzip libtorch-cxx11-abi-shared-with-deps-*.zip

pushd libtorch/lib

# Patch library dependencies
if ls *-*.so* 1> /dev/null 2>&1; then
  for libwithhash in *-*.so*; do 
    if ls *.so 1> /dev/null 2>&1; then
      for lib in *.so; do 
        patchelf --replace-needed $libwithhash $(s=$libwithhash; echo ${s%-*}.so${s#*.so*}) $lib 2>/dev/null || true
      done
    fi
  done
fi

# Remove versioned libraries
rm -rf *-*.so*

# Copy essential libraries
filetocopy=(libtorch.so libtorch_cpu.so libc10.so libc10_hip.so libtorch_hip.so
libmagma.so libgomp.so libcaffe2_nvrtc.so)

mkdir -p $LAMMPS_INSTALL_DIR/libtorch

for lib in ${filetocopy[@]}; do 
  if [ -f $lib ]; then
    cp $lib $LAMMPS_INSTALL_DIR/libtorch/$lib
  fi
done

popd

# Fix CMake configuration
sed -i 's/hip::hipfft;//' /libtorch/share/cmake/Caffe2/Caffe2Targets.cmake

# Download LAMMPS development branch
curl -LO https://github.com/lammps/lammps/archive/refs/heads/$LAMMPS_BRANCH.tar.gz
tar xf $LAMMPS_BRANCH.tar.gz

# Download pair_nequip_allegro from main branch
curl -LO https://github.com/mir-group/pair_nequip_allegro/archive/refs/heads/$PAIR_ALLEGRO_BRANCH.tar.gz
tar xf $PAIR_ALLEGRO_BRANCH.tar.gz

# Patch LAMMPS with pair styles (adds both pair_nequip AND pair_allegro)
cd pair_nequip_allegro-$PAIR_ALLEGRO_BRANCH
./patch_lammps.sh ../lammps-$LAMMPS_BRANCH/

cd ../lammps-$LAMMPS_BRANCH

mkdir build && cd build

# Set HIP compiler flags with pthread
export HIPCC_COMPILE_FLAGS_APPEND="-std=c++17 -isystem ${CRAY_MPICH_PREFIX}/include "
export HIPCC_LINK_FLAGS_APPEND="-L${CRAY_MPICH_PREFIX}/lib -lmpi ${PE_MPICH_GTL_DIR_amd_gfx90a} ${PE_MPICH_GTL_LIBS_amd_gfx90a} -lpthread"

export CMAKE_PREFIX_PATH=/libtorch/share/cmake:$ROCM_PATH/lib/cmake

# Configure LAMMPS with CMake (with OpenMP enabled for better performance)
cmake ../cmake \
  -D CMAKE_INSTALL_PREFIX=$LAMMPS_INSTALL_DIR \
  -D CMAKE_BUILD_TYPE=Release \
  -D CMAKE_CXX_COMPILER=hipcc \
  -D PKG_KOKKOS=ON \
  -D BUILD_MPI=ON \
  -D BUILD_OMP=OFF \
  -D Kokkos_ARCH_ZEN3=ON \
  -D Kokkos_ARCH_VEGA90A=ON \
  -D Kokkos_ENABLE_SERIAL=ON \
  -D Kokkos_ENABLE_HIP=ON \
  -D Kokkos_ENABLE_OPENMP=OFF \
  -D HIP_PATH=/opt/rocm \
  -D CMAKE_TUNE_FLAGS="-munsafe-fp-atomics" \
  -D CMAKE_INSTALL_RPATH='$ORIGIN/../libtorch' \
  -D MKL_INCLUDE_DIR=/opt/pytorch/include

# Remove C++14 flags if present
grep -rl "std=c++14" . 2>/dev/null | xargs sed -i 's/-std=c++14//g' 2>/dev/null || true

# Build and install
make install -j16

# Cleanup
cd /

rm -rf libtorch lammps-$LAMMPS_BRANCH $LAMMPS_BRANCH.tar.gz
rm -rf pair_nequip_allegro-$PAIR_ALLEGRO_BRANCH $PAIR_ALLEGRO_BRANCH.tar.gz
rm -rf libtorch-cxx11-abi-shared-with-deps-*.zip target.lst

# Create module file
mkdir -p /opt/container_modules/lammps-pair-allegro/

cat >/opt/container_modules/lammps-pair-allegro/$LAMMPS_BRANCH.lua <<EOF1
local root="$LAMMPS_INSTALL_DIR"

if not isloaded("pytorch") then
  load("pytorch")
end

prepend_path("PATH", pathJoin(root, "bin"))

prepend_path("LD_LIBRARY_PATH", pathJoin(root, "lib"))
prepend_path("LD_LIBRARY_PATH", pathJoin(root, "lib64"))

prepend_path("PYTHONPATH", pathJoin(root, "lib/python$PYTHON_VERSION/site-packages"))
prepend_path("PYTHONPATH", pathJoin(root, "lib64/python$PYTHON_VERSION/site-packages"))

EOF1
